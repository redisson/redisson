// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto3AllTypes.proto

package org.redisson.codec.protobuf.nativeData;

public final class Proto3AllTypes {
  private Proto3AllTypes() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AllTypes3OrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.redisson.codec.protobuf.raw.AllTypes3)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *types from https://protobuf.dev/programming-guides/proto3/
     * </pre>
     *
     * <code>repeated double doubleType = 1;</code>
     * @return A list containing the doubleType.
     */
    java.util.List<java.lang.Double> getDoubleTypeList();
    /**
     * <pre>
     *types from https://protobuf.dev/programming-guides/proto3/
     * </pre>
     *
     * <code>repeated double doubleType = 1;</code>
     * @return The count of doubleType.
     */
    int getDoubleTypeCount();
    /**
     * <pre>
     *types from https://protobuf.dev/programming-guides/proto3/
     * </pre>
     *
     * <code>repeated double doubleType = 1;</code>
     * @param index The index of the element to return.
     * @return The doubleType at the given index.
     */
    double getDoubleType(int index);

    /**
     * <code>float floatType = 2;</code>
     * @return Whether the floatType field is set.
     */
    boolean hasFloatType();
    /**
     * <code>float floatType = 2;</code>
     * @return The floatType.
     */
    float getFloatType();

    /**
     * <code>int32 int32Type = 3;</code>
     * @return The int32Type.
     */
    int getInt32Type();

    /**
     * <code>int64 int64Type = 4;</code>
     * @return The int64Type.
     */
    long getInt64Type();

    /**
     * <code>uint32 uint32Type = 5;</code>
     * @return The uint32Type.
     */
    int getUint32Type();

    /**
     * <code>uint64 uint64Type = 6;</code>
     * @return The uint64Type.
     */
    long getUint64Type();

    /**
     * <code>sint32 sint32Type = 7;</code>
     * @return The sint32Type.
     */
    int getSint32Type();

    /**
     * <code>sint64 sint64Type = 8;</code>
     * @return The sint64Type.
     */
    long getSint64Type();

    /**
     * <code>fixed32 fixed32Type = 9;</code>
     * @return The fixed32Type.
     */
    int getFixed32Type();

    /**
     * <code>fixed64 fixed64Type = 10;</code>
     * @return The fixed64Type.
     */
    long getFixed64Type();

    /**
     * <code>sfixed32 sfixed32Type = 11;</code>
     * @return The sfixed32Type.
     */
    int getSfixed32Type();

    /**
     * <code>sfixed64 sfixed64Type = 12;</code>
     * @return The sfixed64Type.
     */
    long getSfixed64Type();

    /**
     * <code>bool boolType = 13;</code>
     * @return The boolType.
     */
    boolean getBoolType();

    /**
     * <code>string stringType = 14;</code>
     * @return The stringType.
     */
    java.lang.String getStringType();
    /**
     * <code>string stringType = 14;</code>
     * @return The bytes for stringType.
     */
    com.google.protobuf.ByteString
        getStringTypeBytes();

    /**
     * <code>bytes bytesType = 15;</code>
     * @return The bytesType.
     */
    com.google.protobuf.ByteString getBytesType();
  }
  /**
   * Protobuf type {@code org.redisson.codec.protobuf.raw.AllTypes3}
   */
  public static final class AllTypes3 extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.redisson.codec.protobuf.raw.AllTypes3)
      AllTypes3OrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AllTypes3.newBuilder() to construct.
    private AllTypes3(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AllTypes3() {
      doubleType_ = emptyDoubleList();
      stringType_ = "";
      bytesType_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new AllTypes3();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AllTypes3(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                doubleType_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              doubleType_.addDouble(input.readDouble());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                doubleType_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                doubleType_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 21: {
              bitField0_ |= 0x00000001;
              floatType_ = input.readFloat();
              break;
            }
            case 24: {

              int32Type_ = input.readInt32();
              break;
            }
            case 32: {

              int64Type_ = input.readInt64();
              break;
            }
            case 40: {

              uint32Type_ = input.readUInt32();
              break;
            }
            case 48: {

              uint64Type_ = input.readUInt64();
              break;
            }
            case 56: {

              sint32Type_ = input.readSInt32();
              break;
            }
            case 64: {

              sint64Type_ = input.readSInt64();
              break;
            }
            case 77: {

              fixed32Type_ = input.readFixed32();
              break;
            }
            case 81: {

              fixed64Type_ = input.readFixed64();
              break;
            }
            case 93: {

              sfixed32Type_ = input.readSFixed32();
              break;
            }
            case 97: {

              sfixed64Type_ = input.readSFixed64();
              break;
            }
            case 104: {

              boolType_ = input.readBool();
              break;
            }
            case 114: {
              java.lang.String s = input.readStringRequireUtf8();

              stringType_ = s;
              break;
            }
            case 122: {

              bytesType_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          doubleType_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.redisson.codec.protobuf.nativeData.Proto3AllTypes.internal_static_org_redisson_codec_protobuf_raw_AllTypes3_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.redisson.codec.protobuf.nativeData.Proto3AllTypes.internal_static_org_redisson_codec_protobuf_raw_AllTypes3_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3.class, org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3.Builder.class);
    }

    private int bitField0_;
    public static final int DOUBLETYPE_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.DoubleList doubleType_;
    /**
     * <pre>
     *types from https://protobuf.dev/programming-guides/proto3/
     * </pre>
     *
     * <code>repeated double doubleType = 1;</code>
     * @return A list containing the doubleType.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getDoubleTypeList() {
      return doubleType_;
    }
    /**
     * <pre>
     *types from https://protobuf.dev/programming-guides/proto3/
     * </pre>
     *
     * <code>repeated double doubleType = 1;</code>
     * @return The count of doubleType.
     */
    public int getDoubleTypeCount() {
      return doubleType_.size();
    }
    /**
     * <pre>
     *types from https://protobuf.dev/programming-guides/proto3/
     * </pre>
     *
     * <code>repeated double doubleType = 1;</code>
     * @param index The index of the element to return.
     * @return The doubleType at the given index.
     */
    public double getDoubleType(int index) {
      return doubleType_.getDouble(index);
    }
    private int doubleTypeMemoizedSerializedSize = -1;

    public static final int FLOATTYPE_FIELD_NUMBER = 2;
    private float floatType_;
    /**
     * <code>float floatType = 2;</code>
     * @return Whether the floatType field is set.
     */
    @java.lang.Override
    public boolean hasFloatType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>float floatType = 2;</code>
     * @return The floatType.
     */
    @java.lang.Override
    public float getFloatType() {
      return floatType_;
    }

    public static final int INT32TYPE_FIELD_NUMBER = 3;
    private int int32Type_;
    /**
     * <code>int32 int32Type = 3;</code>
     * @return The int32Type.
     */
    @java.lang.Override
    public int getInt32Type() {
      return int32Type_;
    }

    public static final int INT64TYPE_FIELD_NUMBER = 4;
    private long int64Type_;
    /**
     * <code>int64 int64Type = 4;</code>
     * @return The int64Type.
     */
    @java.lang.Override
    public long getInt64Type() {
      return int64Type_;
    }

    public static final int UINT32TYPE_FIELD_NUMBER = 5;
    private int uint32Type_;
    /**
     * <code>uint32 uint32Type = 5;</code>
     * @return The uint32Type.
     */
    @java.lang.Override
    public int getUint32Type() {
      return uint32Type_;
    }

    public static final int UINT64TYPE_FIELD_NUMBER = 6;
    private long uint64Type_;
    /**
     * <code>uint64 uint64Type = 6;</code>
     * @return The uint64Type.
     */
    @java.lang.Override
    public long getUint64Type() {
      return uint64Type_;
    }

    public static final int SINT32TYPE_FIELD_NUMBER = 7;
    private int sint32Type_;
    /**
     * <code>sint32 sint32Type = 7;</code>
     * @return The sint32Type.
     */
    @java.lang.Override
    public int getSint32Type() {
      return sint32Type_;
    }

    public static final int SINT64TYPE_FIELD_NUMBER = 8;
    private long sint64Type_;
    /**
     * <code>sint64 sint64Type = 8;</code>
     * @return The sint64Type.
     */
    @java.lang.Override
    public long getSint64Type() {
      return sint64Type_;
    }

    public static final int FIXED32TYPE_FIELD_NUMBER = 9;
    private int fixed32Type_;
    /**
     * <code>fixed32 fixed32Type = 9;</code>
     * @return The fixed32Type.
     */
    @java.lang.Override
    public int getFixed32Type() {
      return fixed32Type_;
    }

    public static final int FIXED64TYPE_FIELD_NUMBER = 10;
    private long fixed64Type_;
    /**
     * <code>fixed64 fixed64Type = 10;</code>
     * @return The fixed64Type.
     */
    @java.lang.Override
    public long getFixed64Type() {
      return fixed64Type_;
    }

    public static final int SFIXED32TYPE_FIELD_NUMBER = 11;
    private int sfixed32Type_;
    /**
     * <code>sfixed32 sfixed32Type = 11;</code>
     * @return The sfixed32Type.
     */
    @java.lang.Override
    public int getSfixed32Type() {
      return sfixed32Type_;
    }

    public static final int SFIXED64TYPE_FIELD_NUMBER = 12;
    private long sfixed64Type_;
    /**
     * <code>sfixed64 sfixed64Type = 12;</code>
     * @return The sfixed64Type.
     */
    @java.lang.Override
    public long getSfixed64Type() {
      return sfixed64Type_;
    }

    public static final int BOOLTYPE_FIELD_NUMBER = 13;
    private boolean boolType_;
    /**
     * <code>bool boolType = 13;</code>
     * @return The boolType.
     */
    @java.lang.Override
    public boolean getBoolType() {
      return boolType_;
    }

    public static final int STRINGTYPE_FIELD_NUMBER = 14;
    private volatile java.lang.Object stringType_;
    /**
     * <code>string stringType = 14;</code>
     * @return The stringType.
     */
    @java.lang.Override
    public java.lang.String getStringType() {
      java.lang.Object ref = stringType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stringType_ = s;
        return s;
      }
    }
    /**
     * <code>string stringType = 14;</code>
     * @return The bytes for stringType.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStringTypeBytes() {
      java.lang.Object ref = stringType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stringType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BYTESTYPE_FIELD_NUMBER = 15;
    private com.google.protobuf.ByteString bytesType_;
    /**
     * <code>bytes bytesType = 15;</code>
     * @return The bytesType.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getBytesType() {
      return bytesType_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getDoubleTypeList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(doubleTypeMemoizedSerializedSize);
      }
      for (int i = 0; i < doubleType_.size(); i++) {
        output.writeDoubleNoTag(doubleType_.getDouble(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeFloat(2, floatType_);
      }
      if (int32Type_ != 0) {
        output.writeInt32(3, int32Type_);
      }
      if (int64Type_ != 0L) {
        output.writeInt64(4, int64Type_);
      }
      if (uint32Type_ != 0) {
        output.writeUInt32(5, uint32Type_);
      }
      if (uint64Type_ != 0L) {
        output.writeUInt64(6, uint64Type_);
      }
      if (sint32Type_ != 0) {
        output.writeSInt32(7, sint32Type_);
      }
      if (sint64Type_ != 0L) {
        output.writeSInt64(8, sint64Type_);
      }
      if (fixed32Type_ != 0) {
        output.writeFixed32(9, fixed32Type_);
      }
      if (fixed64Type_ != 0L) {
        output.writeFixed64(10, fixed64Type_);
      }
      if (sfixed32Type_ != 0) {
        output.writeSFixed32(11, sfixed32Type_);
      }
      if (sfixed64Type_ != 0L) {
        output.writeSFixed64(12, sfixed64Type_);
      }
      if (boolType_ != false) {
        output.writeBool(13, boolType_);
      }
      if (!getStringTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 14, stringType_);
      }
      if (!bytesType_.isEmpty()) {
        output.writeBytes(15, bytesType_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * getDoubleTypeList().size();
        size += dataSize;
        if (!getDoubleTypeList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        doubleTypeMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, floatType_);
      }
      if (int32Type_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, int32Type_);
      }
      if (int64Type_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, int64Type_);
      }
      if (uint32Type_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, uint32Type_);
      }
      if (uint64Type_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, uint64Type_);
      }
      if (sint32Type_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, sint32Type_);
      }
      if (sint64Type_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(8, sint64Type_);
      }
      if (fixed32Type_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(9, fixed32Type_);
      }
      if (fixed64Type_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(10, fixed64Type_);
      }
      if (sfixed32Type_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(11, sfixed32Type_);
      }
      if (sfixed64Type_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed64Size(12, sfixed64Type_);
      }
      if (boolType_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, boolType_);
      }
      if (!getStringTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(14, stringType_);
      }
      if (!bytesType_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(15, bytesType_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3)) {
        return super.equals(obj);
      }
      org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 other = (org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3) obj;

      if (!getDoubleTypeList()
          .equals(other.getDoubleTypeList())) return false;
      if (hasFloatType() != other.hasFloatType()) return false;
      if (hasFloatType()) {
        if (java.lang.Float.floatToIntBits(getFloatType())
            != java.lang.Float.floatToIntBits(
                other.getFloatType())) return false;
      }
      if (getInt32Type()
          != other.getInt32Type()) return false;
      if (getInt64Type()
          != other.getInt64Type()) return false;
      if (getUint32Type()
          != other.getUint32Type()) return false;
      if (getUint64Type()
          != other.getUint64Type()) return false;
      if (getSint32Type()
          != other.getSint32Type()) return false;
      if (getSint64Type()
          != other.getSint64Type()) return false;
      if (getFixed32Type()
          != other.getFixed32Type()) return false;
      if (getFixed64Type()
          != other.getFixed64Type()) return false;
      if (getSfixed32Type()
          != other.getSfixed32Type()) return false;
      if (getSfixed64Type()
          != other.getSfixed64Type()) return false;
      if (getBoolType()
          != other.getBoolType()) return false;
      if (!getStringType()
          .equals(other.getStringType())) return false;
      if (!getBytesType()
          .equals(other.getBytesType())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDoubleTypeCount() > 0) {
        hash = (37 * hash) + DOUBLETYPE_FIELD_NUMBER;
        hash = (53 * hash) + getDoubleTypeList().hashCode();
      }
      if (hasFloatType()) {
        hash = (37 * hash) + FLOATTYPE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getFloatType());
      }
      hash = (37 * hash) + INT32TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getInt32Type();
      hash = (37 * hash) + INT64TYPE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getInt64Type());
      hash = (37 * hash) + UINT32TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getUint32Type();
      hash = (37 * hash) + UINT64TYPE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUint64Type());
      hash = (37 * hash) + SINT32TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getSint32Type();
      hash = (37 * hash) + SINT64TYPE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSint64Type());
      hash = (37 * hash) + FIXED32TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getFixed32Type();
      hash = (37 * hash) + FIXED64TYPE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getFixed64Type());
      hash = (37 * hash) + SFIXED32TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getSfixed32Type();
      hash = (37 * hash) + SFIXED64TYPE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSfixed64Type());
      hash = (37 * hash) + BOOLTYPE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getBoolType());
      hash = (37 * hash) + STRINGTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getStringType().hashCode();
      hash = (37 * hash) + BYTESTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getBytesType().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.redisson.codec.protobuf.raw.AllTypes3}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.redisson.codec.protobuf.raw.AllTypes3)
        org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3OrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.redisson.codec.protobuf.nativeData.Proto3AllTypes.internal_static_org_redisson_codec_protobuf_raw_AllTypes3_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.redisson.codec.protobuf.nativeData.Proto3AllTypes.internal_static_org_redisson_codec_protobuf_raw_AllTypes3_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3.class, org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3.Builder.class);
      }

      // Construct using org.redisson.codec.protobuf.raw.Proto3AllTypes.AllTypes3.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        doubleType_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        floatType_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        int32Type_ = 0;

        int64Type_ = 0L;

        uint32Type_ = 0;

        uint64Type_ = 0L;

        sint32Type_ = 0;

        sint64Type_ = 0L;

        fixed32Type_ = 0;

        fixed64Type_ = 0L;

        sfixed32Type_ = 0;

        sfixed64Type_ = 0L;

        boolType_ = false;

        stringType_ = "";

        bytesType_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.redisson.codec.protobuf.nativeData.Proto3AllTypes.internal_static_org_redisson_codec_protobuf_raw_AllTypes3_descriptor;
      }

      @java.lang.Override
      public org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 getDefaultInstanceForType() {
        return org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3.getDefaultInstance();
      }

      @java.lang.Override
      public org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 build() {
        org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 buildPartial() {
        org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 result = new org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          doubleType_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.doubleType_ = doubleType_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.floatType_ = floatType_;
          to_bitField0_ |= 0x00000001;
        }
        result.int32Type_ = int32Type_;
        result.int64Type_ = int64Type_;
        result.uint32Type_ = uint32Type_;
        result.uint64Type_ = uint64Type_;
        result.sint32Type_ = sint32Type_;
        result.sint64Type_ = sint64Type_;
        result.fixed32Type_ = fixed32Type_;
        result.fixed64Type_ = fixed64Type_;
        result.sfixed32Type_ = sfixed32Type_;
        result.sfixed64Type_ = sfixed64Type_;
        result.boolType_ = boolType_;
        result.stringType_ = stringType_;
        result.bytesType_ = bytesType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3) {
          return mergeFrom((org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 other) {
        if (other == org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3.getDefaultInstance()) return this;
        if (!other.doubleType_.isEmpty()) {
          if (doubleType_.isEmpty()) {
            doubleType_ = other.doubleType_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDoubleTypeIsMutable();
            doubleType_.addAll(other.doubleType_);
          }
          onChanged();
        }
        if (other.hasFloatType()) {
          setFloatType(other.getFloatType());
        }
        if (other.getInt32Type() != 0) {
          setInt32Type(other.getInt32Type());
        }
        if (other.getInt64Type() != 0L) {
          setInt64Type(other.getInt64Type());
        }
        if (other.getUint32Type() != 0) {
          setUint32Type(other.getUint32Type());
        }
        if (other.getUint64Type() != 0L) {
          setUint64Type(other.getUint64Type());
        }
        if (other.getSint32Type() != 0) {
          setSint32Type(other.getSint32Type());
        }
        if (other.getSint64Type() != 0L) {
          setSint64Type(other.getSint64Type());
        }
        if (other.getFixed32Type() != 0) {
          setFixed32Type(other.getFixed32Type());
        }
        if (other.getFixed64Type() != 0L) {
          setFixed64Type(other.getFixed64Type());
        }
        if (other.getSfixed32Type() != 0) {
          setSfixed32Type(other.getSfixed32Type());
        }
        if (other.getSfixed64Type() != 0L) {
          setSfixed64Type(other.getSfixed64Type());
        }
        if (other.getBoolType() != false) {
          setBoolType(other.getBoolType());
        }
        if (!other.getStringType().isEmpty()) {
          stringType_ = other.stringType_;
          onChanged();
        }
        if (other.getBytesType() != com.google.protobuf.ByteString.EMPTY) {
          setBytesType(other.getBytesType());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.DoubleList doubleType_ = emptyDoubleList();
      private void ensureDoubleTypeIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          doubleType_ = mutableCopy(doubleType_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       *types from https://protobuf.dev/programming-guides/proto3/
       * </pre>
       *
       * <code>repeated double doubleType = 1;</code>
       * @return A list containing the doubleType.
       */
      public java.util.List<java.lang.Double>
          getDoubleTypeList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(doubleType_) : doubleType_;
      }
      /**
       * <pre>
       *types from https://protobuf.dev/programming-guides/proto3/
       * </pre>
       *
       * <code>repeated double doubleType = 1;</code>
       * @return The count of doubleType.
       */
      public int getDoubleTypeCount() {
        return doubleType_.size();
      }
      /**
       * <pre>
       *types from https://protobuf.dev/programming-guides/proto3/
       * </pre>
       *
       * <code>repeated double doubleType = 1;</code>
       * @param index The index of the element to return.
       * @return The doubleType at the given index.
       */
      public double getDoubleType(int index) {
        return doubleType_.getDouble(index);
      }
      /**
       * <pre>
       *types from https://protobuf.dev/programming-guides/proto3/
       * </pre>
       *
       * <code>repeated double doubleType = 1;</code>
       * @param index The index to set the value at.
       * @param value The doubleType to set.
       * @return This builder for chaining.
       */
      public Builder setDoubleType(
          int index, double value) {
        ensureDoubleTypeIsMutable();
        doubleType_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *types from https://protobuf.dev/programming-guides/proto3/
       * </pre>
       *
       * <code>repeated double doubleType = 1;</code>
       * @param value The doubleType to add.
       * @return This builder for chaining.
       */
      public Builder addDoubleType(double value) {
        ensureDoubleTypeIsMutable();
        doubleType_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *types from https://protobuf.dev/programming-guides/proto3/
       * </pre>
       *
       * <code>repeated double doubleType = 1;</code>
       * @param values The doubleType to add.
       * @return This builder for chaining.
       */
      public Builder addAllDoubleType(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureDoubleTypeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, doubleType_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *types from https://protobuf.dev/programming-guides/proto3/
       * </pre>
       *
       * <code>repeated double doubleType = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDoubleType() {
        doubleType_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private float floatType_ ;
      /**
       * <code>float floatType = 2;</code>
       * @return Whether the floatType field is set.
       */
      @java.lang.Override
      public boolean hasFloatType() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>float floatType = 2;</code>
       * @return The floatType.
       */
      @java.lang.Override
      public float getFloatType() {
        return floatType_;
      }
      /**
       * <code>float floatType = 2;</code>
       * @param value The floatType to set.
       * @return This builder for chaining.
       */
      public Builder setFloatType(float value) {
        bitField0_ |= 0x00000002;
        floatType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>float floatType = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearFloatType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        floatType_ = 0F;
        onChanged();
        return this;
      }

      private int int32Type_ ;
      /**
       * <code>int32 int32Type = 3;</code>
       * @return The int32Type.
       */
      @java.lang.Override
      public int getInt32Type() {
        return int32Type_;
      }
      /**
       * <code>int32 int32Type = 3;</code>
       * @param value The int32Type to set.
       * @return This builder for chaining.
       */
      public Builder setInt32Type(int value) {
        
        int32Type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 int32Type = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearInt32Type() {
        
        int32Type_ = 0;
        onChanged();
        return this;
      }

      private long int64Type_ ;
      /**
       * <code>int64 int64Type = 4;</code>
       * @return The int64Type.
       */
      @java.lang.Override
      public long getInt64Type() {
        return int64Type_;
      }
      /**
       * <code>int64 int64Type = 4;</code>
       * @param value The int64Type to set.
       * @return This builder for chaining.
       */
      public Builder setInt64Type(long value) {
        
        int64Type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 int64Type = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearInt64Type() {
        
        int64Type_ = 0L;
        onChanged();
        return this;
      }

      private int uint32Type_ ;
      /**
       * <code>uint32 uint32Type = 5;</code>
       * @return The uint32Type.
       */
      @java.lang.Override
      public int getUint32Type() {
        return uint32Type_;
      }
      /**
       * <code>uint32 uint32Type = 5;</code>
       * @param value The uint32Type to set.
       * @return This builder for chaining.
       */
      public Builder setUint32Type(int value) {
        
        uint32Type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 uint32Type = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearUint32Type() {
        
        uint32Type_ = 0;
        onChanged();
        return this;
      }

      private long uint64Type_ ;
      /**
       * <code>uint64 uint64Type = 6;</code>
       * @return The uint64Type.
       */
      @java.lang.Override
      public long getUint64Type() {
        return uint64Type_;
      }
      /**
       * <code>uint64 uint64Type = 6;</code>
       * @param value The uint64Type to set.
       * @return This builder for chaining.
       */
      public Builder setUint64Type(long value) {
        
        uint64Type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 uint64Type = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearUint64Type() {
        
        uint64Type_ = 0L;
        onChanged();
        return this;
      }

      private int sint32Type_ ;
      /**
       * <code>sint32 sint32Type = 7;</code>
       * @return The sint32Type.
       */
      @java.lang.Override
      public int getSint32Type() {
        return sint32Type_;
      }
      /**
       * <code>sint32 sint32Type = 7;</code>
       * @param value The sint32Type to set.
       * @return This builder for chaining.
       */
      public Builder setSint32Type(int value) {
        
        sint32Type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sint32 sint32Type = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearSint32Type() {
        
        sint32Type_ = 0;
        onChanged();
        return this;
      }

      private long sint64Type_ ;
      /**
       * <code>sint64 sint64Type = 8;</code>
       * @return The sint64Type.
       */
      @java.lang.Override
      public long getSint64Type() {
        return sint64Type_;
      }
      /**
       * <code>sint64 sint64Type = 8;</code>
       * @param value The sint64Type to set.
       * @return This builder for chaining.
       */
      public Builder setSint64Type(long value) {
        
        sint64Type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sint64 sint64Type = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearSint64Type() {
        
        sint64Type_ = 0L;
        onChanged();
        return this;
      }

      private int fixed32Type_ ;
      /**
       * <code>fixed32 fixed32Type = 9;</code>
       * @return The fixed32Type.
       */
      @java.lang.Override
      public int getFixed32Type() {
        return fixed32Type_;
      }
      /**
       * <code>fixed32 fixed32Type = 9;</code>
       * @param value The fixed32Type to set.
       * @return This builder for chaining.
       */
      public Builder setFixed32Type(int value) {
        
        fixed32Type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>fixed32 fixed32Type = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearFixed32Type() {
        
        fixed32Type_ = 0;
        onChanged();
        return this;
      }

      private long fixed64Type_ ;
      /**
       * <code>fixed64 fixed64Type = 10;</code>
       * @return The fixed64Type.
       */
      @java.lang.Override
      public long getFixed64Type() {
        return fixed64Type_;
      }
      /**
       * <code>fixed64 fixed64Type = 10;</code>
       * @param value The fixed64Type to set.
       * @return This builder for chaining.
       */
      public Builder setFixed64Type(long value) {
        
        fixed64Type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>fixed64 fixed64Type = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearFixed64Type() {
        
        fixed64Type_ = 0L;
        onChanged();
        return this;
      }

      private int sfixed32Type_ ;
      /**
       * <code>sfixed32 sfixed32Type = 11;</code>
       * @return The sfixed32Type.
       */
      @java.lang.Override
      public int getSfixed32Type() {
        return sfixed32Type_;
      }
      /**
       * <code>sfixed32 sfixed32Type = 11;</code>
       * @param value The sfixed32Type to set.
       * @return This builder for chaining.
       */
      public Builder setSfixed32Type(int value) {
        
        sfixed32Type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sfixed32 sfixed32Type = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearSfixed32Type() {
        
        sfixed32Type_ = 0;
        onChanged();
        return this;
      }

      private long sfixed64Type_ ;
      /**
       * <code>sfixed64 sfixed64Type = 12;</code>
       * @return The sfixed64Type.
       */
      @java.lang.Override
      public long getSfixed64Type() {
        return sfixed64Type_;
      }
      /**
       * <code>sfixed64 sfixed64Type = 12;</code>
       * @param value The sfixed64Type to set.
       * @return This builder for chaining.
       */
      public Builder setSfixed64Type(long value) {
        
        sfixed64Type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sfixed64 sfixed64Type = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearSfixed64Type() {
        
        sfixed64Type_ = 0L;
        onChanged();
        return this;
      }

      private boolean boolType_ ;
      /**
       * <code>bool boolType = 13;</code>
       * @return The boolType.
       */
      @java.lang.Override
      public boolean getBoolType() {
        return boolType_;
      }
      /**
       * <code>bool boolType = 13;</code>
       * @param value The boolType to set.
       * @return This builder for chaining.
       */
      public Builder setBoolType(boolean value) {
        
        boolType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool boolType = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearBoolType() {
        
        boolType_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object stringType_ = "";
      /**
       * <code>string stringType = 14;</code>
       * @return The stringType.
       */
      public java.lang.String getStringType() {
        java.lang.Object ref = stringType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stringType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string stringType = 14;</code>
       * @return The bytes for stringType.
       */
      public com.google.protobuf.ByteString
          getStringTypeBytes() {
        java.lang.Object ref = stringType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stringType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string stringType = 14;</code>
       * @param value The stringType to set.
       * @return This builder for chaining.
       */
      public Builder setStringType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        stringType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string stringType = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearStringType() {
        
        stringType_ = getDefaultInstance().getStringType();
        onChanged();
        return this;
      }
      /**
       * <code>string stringType = 14;</code>
       * @param value The bytes for stringType to set.
       * @return This builder for chaining.
       */
      public Builder setStringTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        stringType_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString bytesType_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes bytesType = 15;</code>
       * @return The bytesType.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getBytesType() {
        return bytesType_;
      }
      /**
       * <code>bytes bytesType = 15;</code>
       * @param value The bytesType to set.
       * @return This builder for chaining.
       */
      public Builder setBytesType(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        bytesType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes bytesType = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearBytesType() {
        
        bytesType_ = getDefaultInstance().getBytesType();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.redisson.codec.protobuf.raw.AllTypes3)
    }

    // @@protoc_insertion_point(class_scope:org.redisson.codec.protobuf.raw.AllTypes3)
    private static final org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3();
    }

    public static org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AllTypes3>
        PARSER = new com.google.protobuf.AbstractParser<AllTypes3>() {
      @java.lang.Override
      public AllTypes3 parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AllTypes3(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<AllTypes3> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AllTypes3> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.redisson.codec.protobuf.nativeData.Proto3AllTypes.AllTypes3 getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_redisson_codec_protobuf_raw_AllTypes3_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_redisson_codec_protobuf_raw_AllTypes3_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024proto3AllTypes.proto\022\037org.redisson.cod" +
      "ec.protobuf.raw\"\312\002\n\tAllTypes3\022\022\n\ndoubleT" +
      "ype\030\001 \003(\001\022\026\n\tfloatType\030\002 \001(\002H\000\210\001\001\022\021\n\tint" +
      "32Type\030\003 \001(\005\022\021\n\tint64Type\030\004 \001(\003\022\022\n\nuint3" +
      "2Type\030\005 \001(\r\022\022\n\nuint64Type\030\006 \001(\004\022\022\n\nsint3" +
      "2Type\030\007 \001(\021\022\022\n\nsint64Type\030\010 \001(\022\022\023\n\013fixed" +
      "32Type\030\t \001(\007\022\023\n\013fixed64Type\030\n \001(\006\022\024\n\014sfi" +
      "xed32Type\030\013 \001(\017\022\024\n\014sfixed64Type\030\014 \001(\020\022\020\n" +
      "\010boolType\030\r \001(\010\022\022\n\nstringType\030\016 \001(\t\022\021\n\tb" +
      "ytesType\030\017 \001(\014B\014\n\n_floatTypeB1\n\037org.redi" +
      "sson.codec.protobuf.rawB\016Proto3AllTypesb" +
      "\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_org_redisson_codec_protobuf_raw_AllTypes3_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_redisson_codec_protobuf_raw_AllTypes3_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_redisson_codec_protobuf_raw_AllTypes3_descriptor,
        new java.lang.String[] { "DoubleType", "FloatType", "Int32Type", "Int64Type", "Uint32Type", "Uint64Type", "Sint32Type", "Sint64Type", "Fixed32Type", "Fixed64Type", "Sfixed32Type", "Sfixed64Type", "BoolType", "StringType", "BytesType", "FloatType", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
